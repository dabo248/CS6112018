DavidBook-Pro:Python D4VE$ python3 cs611python.py


PythonExercises-v2 by David Bochan


=== EXERCISE 1 ===


(a) 5 / 3 = 1.6666666666666667
=> with python3 you can receive a float even if you divide two integers


(b) 5 % 3 = 2
=> % is the modulus which divides left hand operand by right hand operand and returns remainder


(c) 5.0 / 3 = 1.6666666666666667
=> outputs a float number.. there is no difference if a plain 5 or 5.0 is used


(d) 5 / 3.0 = 1.6666666666666667
=> outputs a float number.. there is no difference if a plain 3 or 3.0 is used


(e) 5.2 % 3 = 2.2
=> % is the modulus which divides left hand operand by right hand operand and returns remainder


=== EXERCISE 2 ===


(a) 2000.3 ** 200 = ...
=> The python3 interpreter throws a OverflowError (34, 'Result too large')


(b) 1.0 + 1.0 - 1.0 = 1.0
=> Addition and substraction of float values which results in another float value


(c) 1.0 + 1.0e20 - 1.0e20 = 0.0
=> 1.0 + 1.0e20 is rounded as close as possible, which is 1.0e20 and after substraction of it again it results in 0.0


=== EXERCISE 3 ===


(a) float(123) = 123.0
=> Takes the integer value 123 as input and casts it to the float value 123.0


(b) float('123') = 123.0
=> Takes the string '123' as input and casts it to the float value 123.0


(c) float('123.23') = 123.23
=> Takes the string '123.23' as input and casts it to the float value 123.23


(d) int(123.23) = 123
=> Takes the float 123.23 as input and casts it to the integer value 123


(e) int('123.23') = ...
=> The int() function can't cast a string to float to int and thus throws a ValueError (invalid literal for int() with base 10: '123.23')


(f) int(float('123.23')) = 123
=> As we cast the string to float first, we can use it as a input to the int() function and receive a integer


(g) str(12) = 12
=> Takes the integer 12 as input and casts it to the string '12'


(h) str(12.2) = 12.2
=> Takes the float 12.2 as input and casts it to the string '12.2'


(i) bool('a') = True
=> Because an actual value (the character 'a') is passed to the bool() function, True is returned


(j) bool(0) = False
=> The boolean value False equals 0 in python, thus False is returned


(k) bool(0.1) = True
=> Because a value != 0 is provided in the bool() function, it returns True


=== EXERCISE 4 ===


range(5) = range(0, 5)
=> range(5) returns a sequence of integers from 0 to 4. for i in range(5) is consequently iterating over the sequence of integers


type(range(5)) = <class 'range'>
=> The type function returns an object's class. For range(5) the class range is returned


=== EXERCISE 5 ===


div_by_number([5, 7, 11], 20)

5
7
10
11
14
15
20
21
22
25
28
30
33
35
35
40
42
44
45
49


=== EXERCISE 6 ===


(a) & (b)

is_prime(0) = False

is_prime(1) = False

is_prime(3) = True

is_prime(7) = True

is_prime(8) = False

is_prime(112331) = True

(c) primes_up_to(100) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

(d) first_primes(12) = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]


=== EXERCISE 7 ===


(a) print_elements(elements_list)

12
abc
92.2
hello

(b) print_elements_reverse(elements_list)

hello
92.2
abc
12

(c) len_elements(elements_list)

len_elements(elements_list) = 4


=== EXERCISE 8 ===


(a) a = [12, 'abc', 92.2, 'hello']

(b) b = a

(c) b[1] = 'changed'

(d) a = [12, 'changed', 92.2, 'hello']
=> b is binding to the same object as a, so when b[1] was changed a[1] also shows the change

(e) c = a[:]

(f) c[2] = 'also changed'

(g) a = [12, 'changed', 92.2, 'hello']
=> A copy of the list a was created with a[:] and assigned to c, thus a[2] did not change when c[2] changed

...

numbers = [12, 21, 214, 3]
set_first_elem_to_zero(numbers) = [0, 21, 214, 3]
numbers = [0, 21, 214, 3]
=> The original list also changed, even though we did not assign the returned list to it (same binding)


=== EXERCISE 9 ===


elements = [[1, 3], [3, 6]]
flat_list(elements) = [1, 3, 3, 6]


=== EXERCISE 10 ===


See Figure_1.png


=== EXERCISE 11 ===


product_iteration(numbers) = 645120
product_iteration(empty_list) = 0


product_recursive(numbers) = 645120
product_recursive(empty_list) = 0


=== EXERCISE 12 ===


Good to know!


=== EXERCISE 13 ===


read_file('emails.txt')

Lorem Ipsum is simply dummy text (lorem_ipsum@gmail.com) of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,when an unknown printer with the email address printer@unknown.com took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries,but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum (lorem@ipsum.com, ipsum@lorem.uk) passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. For more information contact uson PageMaker@lorem.io.

extract_email(file_content)

['lorem_ipsum@gmail.com', 'printer@unknown.com', 'lorem@ipsum.com', 'ipsum@lorem.uk', 'PageMaker@lorem.io']